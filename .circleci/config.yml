version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Install AWS CLI if not Exist
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "AWS CLI already installed"
            fi
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:6} --region=$AWS_REGION
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6} --force --region=$AWS_REGION
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:6} --region=$AWS_REGION
            aws cloudformation delete-stack --stack-name udapeople-cloudfront --region=$AWS_REGION
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0 #docker image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend Test
          command: |
            cd frontend  
            npm i 
            npm run test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Test
          command: |
          
            cd backend
            npm i
            npm run test
            
  

  
  scan-frontend:
    docker: #docker image
      - image: circleci/node:13.8.0
    steps: #checkout git,restore from cache
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend Audit
          command: |
            cd frontend
            npm i
            npm update
            npm audit fix --audit-level=critical 
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0 #docker image here
    steps: #checkout code from git,restore cache
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical


  deploy-infrastructure:
    docker:
         - image:  amazon/aws-cli
       
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip 
   
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 

  
  configure-infrastructure:
    docker:
         - image:  amazon/aws-cli
       
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys: 
          fingerprints: [1c:e1:51:09:8e:8f:13:47:16:be:83:8c:c0:88:f8:fd]
      - attach_workspace:
           at: ~/
      - image: python:3.7-alpine3.11

      # Docker image here that supports Ansible
 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure    
   


workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
            requires: [build-frontend]
      - scan-frontend:
            requires: [build-frontend]

      - build-backend
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]

        
      - deploy-infrastructure:
           requires: [test-frontend, scan-frontend, test-backend, scan-backend]
           filters:
             branches:
               only: [master]


        
